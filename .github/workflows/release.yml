name: Release

on:
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            cc: gcc
            artifact_name: glasscms-linux-amd64
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            cc: aarch64-linux-gnu-gcc
            artifact_name: glasscms-linux-arm64
          - os: macos-latest
            goos: darwin
            goarch: amd64
            cc: clang
            artifact_name: glasscms-darwin-amd64
          - os: macos-latest
            goos: darwin
            goarch: arm64
            cc: clang
            artifact_name: glasscms-darwin-arm64
    
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'

    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
        echo "VERSION_NO_V=${VERSION#v}" >> $GITHUB_OUTPUT
        
        # Validate semantic version format (basic check for v prefix + 3 numbers)
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9] ]]; then
          echo "Error: Version '$VERSION' is not a valid semantic version"
          echo "Expected format: v1.0.0, v1.0.0-alpha.1, v1.0.0+build.1, etc."
          exit 1
        fi

    - name: Get build info
      id: build_info
      run: |
        echo "COMMIT=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
        echo "DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

    - name: Install cross-compilation tools (Linux only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Build binary
      run: |
        mkdir -p dist
        
        LDFLAGS="-s -w -X main.Version=${{ steps.get_version.outputs.VERSION }} -X main.Commit=${{ steps.build_info.outputs.COMMIT }} -X main.Date=${{ steps.build_info.outputs.DATE }}"
        
        CGO_ENABLED=1 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CC=${{ matrix.cc }} go build -ldflags="${LDFLAGS}" -o dist/${{ matrix.artifact_name }} .

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/${{ matrix.artifact_name }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Get version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist

    - name: Prepare release files
      run: |
        # Move all binaries to a single directory
        mkdir -p release
        find dist -name "glasscms-*" -type f -exec mv {} release/ \;
        
        # Create checksums
        cd release
        sha256sum * > checksums.txt

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        files: release/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'alpha') || contains(steps.get_version.outputs.VERSION, 'beta') || contains(steps.get_version.outputs.VERSION, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}