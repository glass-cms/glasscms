// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package query

import (
	"context"
	"time"
)

const createToken = `-- name: CreateToken :exec
INSERT INTO tokens (id, suffix, hash, create_time, expire_time) VALUES (?, ?, ?, CURRENT_TIMESTAMP, ?)
`

type CreateTokenParams struct {
	ID         string    `db:"id"`
	Suffix     string    `db:"suffix"`
	Hash       string    `db:"hash"`
	ExpireTime time.Time `db:"expire_time"`
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.exec(ctx, q.createTokenStmt, createToken,
		arg.ID,
		arg.Suffix,
		arg.Hash,
		arg.ExpireTime,
	)
	return err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM tokens WHERE id = ?
`

func (q *Queries) DeleteToken(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteTokenStmt, deleteToken, id)
	return err
}

const getToken = `-- name: GetToken :one
SELECT id, suffix, hash, create_time, expire_time FROM tokens WHERE hash = ?
`

func (q *Queries) GetToken(ctx context.Context, hash string) (Token, error) {
	row := q.queryRow(ctx, q.getTokenStmt, getToken, hash)
	var i Token
	err := row.Scan(
		&i.ID,
		&i.Suffix,
		&i.Hash,
		&i.CreateTime,
		&i.ExpireTime,
	)
	return i, err
}
