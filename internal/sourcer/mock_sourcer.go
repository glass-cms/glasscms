// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package sourcer

import (
	"sync"
)

// Ensure, that SourcerMock does implement Sourcer.
// If this is not the case, regenerate this file with moq.
var _ Sourcer = &SourcerMock{}

// SourcerMock is a mock implementation of Sourcer.
//
//	func TestSomethingThatUsesSourcer(t *testing.T) {
//
//		// make and configure a mocked Sourcer
//		mockedSourcer := &SourcerMock{
//			NextFunc: func() (Source, error) {
//				panic("mock out the Next method")
//			},
//			RemainingFunc: func() int {
//				panic("mock out the Remaining method")
//			},
//			SizeFunc: func() int {
//				panic("mock out the Size method")
//			},
//		}
//
//		// use mockedSourcer in code that requires Sourcer
//		// and then make assertions.
//
//	}
type SourcerMock struct {
	// NextFunc mocks the Next method.
	NextFunc func() (Source, error)

	// RemainingFunc mocks the Remaining method.
	RemainingFunc func() int

	// SizeFunc mocks the Size method.
	SizeFunc func() int

	// calls tracks calls to the methods.
	calls struct {
		// Next holds details about calls to the Next method.
		Next []struct {
		}
		// Remaining holds details about calls to the Remaining method.
		Remaining []struct {
		}
		// Size holds details about calls to the Size method.
		Size []struct {
		}
	}
	lockNext      sync.RWMutex
	lockRemaining sync.RWMutex
	lockSize      sync.RWMutex
}

// Next calls NextFunc.
func (mock *SourcerMock) Next() (Source, error) {
	if mock.NextFunc == nil {
		panic("SourcerMock.NextFunc: method is nil but Sourcer.Next was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNext.Lock()
	mock.calls.Next = append(mock.calls.Next, callInfo)
	mock.lockNext.Unlock()
	return mock.NextFunc()
}

// NextCalls gets all the calls that were made to Next.
// Check the length with:
//
//	len(mockedSourcer.NextCalls())
func (mock *SourcerMock) NextCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNext.RLock()
	calls = mock.calls.Next
	mock.lockNext.RUnlock()
	return calls
}

// Remaining calls RemainingFunc.
func (mock *SourcerMock) Remaining() int {
	if mock.RemainingFunc == nil {
		panic("SourcerMock.RemainingFunc: method is nil but Sourcer.Remaining was just called")
	}
	callInfo := struct {
	}{}
	mock.lockRemaining.Lock()
	mock.calls.Remaining = append(mock.calls.Remaining, callInfo)
	mock.lockRemaining.Unlock()
	return mock.RemainingFunc()
}

// RemainingCalls gets all the calls that were made to Remaining.
// Check the length with:
//
//	len(mockedSourcer.RemainingCalls())
func (mock *SourcerMock) RemainingCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockRemaining.RLock()
	calls = mock.calls.Remaining
	mock.lockRemaining.RUnlock()
	return calls
}

// Size calls SizeFunc.
func (mock *SourcerMock) Size() int {
	if mock.SizeFunc == nil {
		panic("SourcerMock.SizeFunc: method is nil but Sourcer.Size was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSize.Lock()
	mock.calls.Size = append(mock.calls.Size, callInfo)
	mock.lockSize.Unlock()
	return mock.SizeFunc()
}

// SizeCalls gets all the calls that were made to Size.
// Check the length with:
//
//	len(mockedSourcer.SizeCalls())
func (mock *SourcerMock) SizeCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSize.RLock()
	calls = mock.calls.Size
	mock.lockSize.RUnlock()
	return calls
}
