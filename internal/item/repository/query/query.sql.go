// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package query

import (
	"context"
	"database/sql"
	"time"
)

const createItem = `-- name: CreateItem :one
INSERT INTO
    items (
        name,
        display_name,
        create_time,
        update_time,
        delete_time,
        hash,
        content,
        properties,
        metadata
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING name, display_name, create_time, update_time, delete_time, hash, content, properties, metadata
`

type CreateItemParams struct {
	Name        string
	DisplayName string
	CreateTime  time.Time
	UpdateTime  time.Time
	DeleteTime  sql.NullTime
	Hash        sql.NullString
	Content     sql.NullString
	Properties  interface{}
	Metadata    interface{}
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.queryRow(ctx, q.createItemStmt, createItem,
		arg.Name,
		arg.DisplayName,
		arg.CreateTime,
		arg.UpdateTime,
		arg.DeleteTime,
		arg.Hash,
		arg.Content,
		arg.Properties,
		arg.Metadata,
	)
	var i Item
	err := row.Scan(
		&i.Name,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeleteTime,
		&i.Hash,
		&i.Content,
		&i.Properties,
		&i.Metadata,
	)
	return i, err
}

const getItem = `-- name: GetItem :one
SELECT
    name, display_name, create_time, update_time, delete_time, hash, content, properties, metadata
FROM
    items
WHERE
    name = ?
    AND delete_time IS NULL
`

func (q *Queries) GetItem(ctx context.Context, name string) (Item, error) {
	row := q.queryRow(ctx, q.getItemStmt, getItem, name)
	var i Item
	err := row.Scan(
		&i.Name,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeleteTime,
		&i.Hash,
		&i.Content,
		&i.Properties,
		&i.Metadata,
	)
	return i, err
}
