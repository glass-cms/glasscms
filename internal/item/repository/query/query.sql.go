// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package query

import (
	"context"
	"database/sql"
	"strings"
	"time"
)

const createItem = `-- name: CreateItem :one
INSERT INTO
    items (
        name,
        display_name,
        create_time,
        update_time,
        delete_time,
        hash,
        content,
        properties,
        metadata
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING name, display_name, create_time, update_time, delete_time, hash, content, properties, metadata
`

type CreateItemParams struct {
	Name        string         `db:"name"`
	DisplayName string         `db:"display_name"`
	CreateTime  time.Time      `db:"create_time"`
	UpdateTime  time.Time      `db:"update_time"`
	DeleteTime  sql.NullTime   `db:"delete_time"`
	Hash        sql.NullString `db:"hash"`
	Content     sql.NullString `db:"content"`
	Properties  interface{}    `db:"properties"`
	Metadata    interface{}    `db:"metadata"`
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.queryRow(ctx, q.createItemStmt, createItem,
		arg.Name,
		arg.DisplayName,
		arg.CreateTime,
		arg.UpdateTime,
		arg.DeleteTime,
		arg.Hash,
		arg.Content,
		arg.Properties,
		arg.Metadata,
	)
	var i Item
	err := row.Scan(
		&i.Name,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeleteTime,
		&i.Hash,
		&i.Content,
		&i.Properties,
		&i.Metadata,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
UPDATE
    items
SET
    delete_time = ?
WHERE
    name = ?
`

type DeleteItemParams struct {
	DeleteTime sql.NullTime `db:"delete_time"`
	Name       string       `db:"name"`
}

func (q *Queries) DeleteItem(ctx context.Context, arg DeleteItemParams) error {
	_, err := q.exec(ctx, q.deleteItemStmt, deleteItem, arg.DeleteTime, arg.Name)
	return err
}

const deleteItems = `-- name: DeleteItems :exec
UPDATE
    items 
SET 
    delete_time = CURRENT_TIMESTAMP
WHERE 
    name in (/*SLICE:names*/?)
`

func (q *Queries) DeleteItems(ctx context.Context, names []string) error {
	query := deleteItems
	var queryParams []interface{}
	if len(names) > 0 {
		for _, v := range names {
			queryParams = append(queryParams, v)
		}
		query = strings.Replace(query, "/*SLICE:names*/?", strings.Repeat(",?", len(names))[1:], 1)
	} else {
		query = strings.Replace(query, "/*SLICE:names*/?", "NULL", 1)
	}
	_, err := q.exec(ctx, nil, query, queryParams...)
	return err
}

const getItem = `-- name: GetItem :one
SELECT
    name, display_name, create_time, update_time, delete_time, hash, content, properties, metadata
FROM
    items
WHERE
    name = ?
    AND delete_time IS NULL
`

func (q *Queries) GetItem(ctx context.Context, name string) (Item, error) {
	row := q.queryRow(ctx, q.getItemStmt, getItem, name)
	var i Item
	err := row.Scan(
		&i.Name,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeleteTime,
		&i.Hash,
		&i.Content,
		&i.Properties,
		&i.Metadata,
	)
	return i, err
}

const listItems = `-- name: ListItems :many
SELECT
    name, display_name, create_time, update_time, delete_time, hash, content, properties, metadata
FROM
    items
WHERE
    delete_time IS NULL
`

func (q *Queries) ListItems(ctx context.Context) ([]Item, error) {
	rows, err := q.query(ctx, q.listItemsStmt, listItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.Name,
			&i.DisplayName,
			&i.CreateTime,
			&i.UpdateTime,
			&i.DeleteTime,
			&i.Hash,
			&i.Content,
			&i.Properties,
			&i.Metadata,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one
UPDATE
    items
SET
    name = ?,
    display_name = ?,
    update_time = ?,
    hash = ?,
    content = ?,
    properties = ?,
    metadata = ?
WHERE
    name = ?
    AND delete_time IS NULL
RETURNING name, display_name, create_time, update_time, delete_time, hash, content, properties, metadata
`

type UpdateItemParams struct {
	Name        string         `db:"name"`
	DisplayName string         `db:"display_name"`
	UpdateTime  time.Time      `db:"update_time"`
	Hash        sql.NullString `db:"hash"`
	Content     sql.NullString `db:"content"`
	Properties  interface{}    `db:"properties"`
	Metadata    interface{}    `db:"metadata"`
	Name_2      string         `db:"name_2"`
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.queryRow(ctx, q.updateItemStmt, updateItem,
		arg.Name,
		arg.DisplayName,
		arg.UpdateTime,
		arg.Hash,
		arg.Content,
		arg.Properties,
		arg.Metadata,
		arg.Name_2,
	)
	var i Item
	err := row.Scan(
		&i.Name,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeleteTime,
		&i.Hash,
		&i.Content,
		&i.Properties,
		&i.Metadata,
	)
	return i, err
}

const upsertItem = `-- name: UpsertItem :one
INSERT INTO items (
    name, 
    display_name, 
    create_time, 
    update_time, 
    delete_time, 
    hash, 
    content, 
    properties, 
    metadata
)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
ON CONFLICT(name) DO UPDATE SET
    display_name = excluded.display_name,
    create_time = excluded.create_time,
    update_time = excluded.update_time,
    delete_time = excluded.delete_time,
    hash = excluded.hash,
    content = excluded.content,
    properties = excluded.properties,
    metadata = excluded.metadata
RETURNING name, display_name, create_time, update_time, delete_time, hash, content, properties, metadata
`

type UpsertItemParams struct {
	Name        string         `db:"name"`
	DisplayName string         `db:"display_name"`
	CreateTime  time.Time      `db:"create_time"`
	UpdateTime  time.Time      `db:"update_time"`
	DeleteTime  sql.NullTime   `db:"delete_time"`
	Hash        sql.NullString `db:"hash"`
	Content     sql.NullString `db:"content"`
	Properties  interface{}    `db:"properties"`
	Metadata    interface{}    `db:"metadata"`
}

func (q *Queries) UpsertItem(ctx context.Context, arg UpsertItemParams) (Item, error) {
	row := q.queryRow(ctx, q.upsertItemStmt, upsertItem,
		arg.Name,
		arg.DisplayName,
		arg.CreateTime,
		arg.UpdateTime,
		arg.DeleteTime,
		arg.Hash,
		arg.Content,
		arg.Properties,
		arg.Metadata,
	)
	var i Item
	err := row.Scan(
		&i.Name,
		&i.DisplayName,
		&i.CreateTime,
		&i.UpdateTime,
		&i.DeleteTime,
		&i.Hash,
		&i.Content,
		&i.Properties,
		&i.Metadata,
	)
	return i, err
}
