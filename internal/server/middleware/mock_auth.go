// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package middleware

import (
	"context"
	"sync"
)

// Ensure, that AuthenticationMock does implement Authentication.
// If this is not the case, regenerate this file with moq.
var _ Authentication = &AuthenticationMock{}

// AuthenticationMock is a mock implementation of Authentication.
//
//	func TestSomethingThatUsesAuthentication(t *testing.T) {
//
//		// make and configure a mocked Authentication
//		mockedAuthentication := &AuthenticationMock{
//			ValidateTokenFunc: func(ctx context.Context, token string) (bool, error) {
//				panic("mock out the ValidateToken method")
//			},
//		}
//
//		// use mockedAuthentication in code that requires Authentication
//		// and then make assertions.
//
//	}
type AuthenticationMock struct {
	// ValidateTokenFunc mocks the ValidateToken method.
	ValidateTokenFunc func(ctx context.Context, token string) (bool, error)

	// calls tracks calls to the methods.
	calls struct {
		// ValidateToken holds details about calls to the ValidateToken method.
		ValidateToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
		}
	}
	lockValidateToken sync.RWMutex
}

// ValidateToken calls ValidateTokenFunc.
func (mock *AuthenticationMock) ValidateToken(ctx context.Context, token string) (bool, error) {
	if mock.ValidateTokenFunc == nil {
		panic("AuthenticationMock.ValidateTokenFunc: method is nil but Authentication.ValidateToken was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockValidateToken.Lock()
	mock.calls.ValidateToken = append(mock.calls.ValidateToken, callInfo)
	mock.lockValidateToken.Unlock()
	return mock.ValidateTokenFunc(ctx, token)
}

// ValidateTokenCalls gets all the calls that were made to ValidateToken.
// Check the length with:
//
//	len(mockedAuthentication.ValidateTokenCalls())
func (mock *AuthenticationMock) ValidateTokenCalls() []struct {
	Ctx   context.Context
	Token string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
	}
	mock.lockValidateToken.RLock()
	calls = mock.calls.ValidateToken
	mock.lockValidateToken.RUnlock()
	return calls
}
